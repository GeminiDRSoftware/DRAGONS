# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

on_rtd = os.environ.get('READTHEDOCS') == 'True'

print(' Printing current working directory for debugging:')
print(' ' + os.getcwd())

if on_rtd:
    sys.path.insert(0, os.path.abspath('./../../../'))
else:
    sys.path.insert(0, os.path.abspath('./../../../'))


# -- Project information -----------------------------------------------------

project = 'DRAGONS Tutorial - GMOS-S Imaging Data Reduction'
copyright = '2019, Bruno Quint'
author = 'Bruno Quint'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = ''


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.viewcode',
    'sphinx.ext.githubpages',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'DRAGONSTutorial-GMOS-SImagingDataReductiondoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'DRAGONSTutorial-GMOS-SImagingDataReduction.tex', 'DRAGONS Tutorial - GMOS-S Imaging Data Reduction Documentation',
     'Bruno Quint', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'dragonsTutorial-gmos-simagingdatareduction', 'DRAGONS Tutorial - GMOS-S Imaging Data Reduction Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'DRAGONSTutorial-GMOS-SImagingDataReduction', 'DRAGONS Tutorial - GMOS-S Imaging Data Reduction Documentation',
     author, 'DRAGONSTutorial-GMOS-SImagingDataReduction', 'One line description of project.',
     'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

intersphinx_mapping = {
    'astrodata': ('https://astrodata-user-manual.readthedocs.io/en/latest/', None),
    'astropy': ('http://docs.astropy.org/en/stable/', None),
    'gemini_instruments': ('https://astrodata-user-manual.readthedocs.io/en/latest/', None),
    'geminidr': ('https://dragons-recipe-system-programmers-manual.readthedocs.io/en/latest/', None),
    'matplotlib': ('http://matplotlib.sourceforge.net/', None),
    'numpy': ('http://docs.scipy.org/doc/numpy/', None),
    'python': ('https://docs.python.org/3', None),
    'recipe_system': ('https://dragons-recipe-system-programmers-manual.readthedocs.io/en/latest/', None),
}


# Activate the todos
todo_include_todos=True


def run_api_doc(_):
    """
    Automatic API generator

    This method is used to generate API automatically by importing all the
    modules and sub-modules inside a package.

    It is equivalent to run:
    >>> sphinx-apidoc --force --no-toc --separate --module --output-dir api/ ../../ ../../cal_service

    It is useful because it creates .rst files on the file.

    NOTE
    ----
        This does not work with PyCharm default build. If you want to trigger
        this function, use the standard `$ make html` in the command line.
        The .rst files will be generated. After that, you can use PyCharm's
        build helper.
    """
    build_packages = [
        'geminidr'
    ]

    is_running_in_pycharm = "PYCHARM_HOSTED" in os.environ

    if is_running_in_pycharm:
        current_path = os.path.split(__file__)[0]
    else:
        current_path = os.getcwd()

    relative_path = "../../../../"

    print("Am I running on PyCharm? {}", is_running_in_pycharm)
    print("Current Path: {}", current_path)

    for p in build_packages:

        build_path = os.path.join(current_path, relative_path, p)

        ignore_paths = [
            'doc',
            'f2',
            'gsaoi',
            'gnirs',
            'niri',
            'test',
            'tests',
        ]

        ignore_paths = [os.path.join(build_path, i) for i in ignore_paths]

        argv = [
                   "--force",
                   "--no-toc",
                   # "--separate",
                   "--module",
                   "--output-dir", "api/",
                   build_path
               ] + ignore_paths

        sys.path.insert(0, build_path)

        try:
            # Sphinx 1.7+
            from sphinx.ext import apidoc
            apidoc.main(argv)

        except ImportError:
            # Sphinx 1.6 (and earlier)
            from sphinx import apidoc
            argv.insert(0, apidoc.__file__)
            apidoc.main(argv)


def setup(app):

    # Adding style in order to have the todos show up in a red box.
    app.add_stylesheet('todo-styles.css')
    app.add_stylesheet('code.xref-styles.css')

    # Automatic API generation
    app.connect('builder-inited', run_api_doc)
