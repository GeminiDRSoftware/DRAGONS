#!/usr/bin/env python

"""
App to print to screen descriptor values for astrodata-supported FITS files.

Eg. showd N20120212S0012.fits -d camera filter_name
    showd N20120212S*.fits -d camera filter_name
"""

import sys
import argparse
from inspect import signature

from importlib import import_module

import astrodata
import gemini_instruments

SHORT_DESCRIPTION = "For each input file, show the value of the specified descriptors."

def get_descriptor_value(ad, descriptors, pretty=True):
    """
    Return the descriptor values as a list of DescriptorValue objects.

    Parameters
    ----------
    ad : AstroData object
        The AstroData object we are probing.
    descriptors : list of str
        A list of strings each equivalent to the name of the descriptor
        one wants to access.

    Returns
    -------
    A list of DescriptorValue objects.

    Raises
    ------
    See Also
    --------
    Examples
    --------
    ad = AstroData('filename.fits')
    descriptors = ['camera', 'filter_name']
    values = get_descriptor_value(ad, descriptors)
    """
    values = []
    for descriptor in descriptors:
        sig = signature(getattr(ad, descriptor))
        if 'pretty' in sig.parameters:
            values.append(getattr(ad, descriptor)(pretty=pretty))
        else:
            values.append(getattr(ad, descriptor)())

    return values

def printtable(results):
    """
    Format and print in a nice table the results stored in the input list
    of lists.

    Parameters
    ----------
    results : list of list
        List of lists with the results to be printed to screen.  First row is
        the header.  First column is the filename, the other columns are the
        requested descriptors.

    """
    # Find max width of each column.
    max_widths = [max(len(str(item)) for item in row) for row in zip(*results)]

    # Define format
    # Max column widths, plus 3 spaces between columns.
    # First column left justified, the rest right justified.

    dash_line = "-" * (sum(max_widths) + (len(max_widths)-1)*3)

    display_format = '{:<'+str(max_widths[0])+'s}'
    for i in range(1,len(max_widths)):
        display_format += '   {:>'+str(max_widths[i])+'s}'


    # Print the table to screen.
    header = True
    for row in results:
        if header:
            print(dash_line)
            print(display_format.format(*[str(item) for item in row]))
            print(dash_line)
            header = False
        else:
            print(display_format.format(*[str(item) for item in row]))

    return

def parse_args(command_line_args):
    """
    Parse the command line.
    """
    parser = argparse.ArgumentParser(description=SHORT_DESCRIPTION)
    parser.add_argument('inputs', type=str, nargs="*",
                        help="Input FITS files")
    parser.add_argument('--descriptors', '-d', type=str, nargs=1,
                        dest='descriptors', action='store', required=True,
                        help='comma-separated list of descriptor values to return')
    parser.add_argument('--long', default=False, action='store_true',
                        help='Long format for the descriptor value')
    parser.add_argument('--csv', default=False, action='store_true',
                        help='Format as CSV list.')
    parser.add_argument('--adpkg', type=str, nargs=1,
                        dest='adpkg', action='store', required=False,
                        help='Name of the astrodata instrument package to use'
                             'if not gemini_instruments')
    parser.add_argument('--debug', default=False, action='store_true',
                        help='Toggle debug mode')

    args = parser.parse_args(command_line_args)

    args.descriptors = args.descriptors[0].split(',')

    if args.adpkg is not None:
        args.adpkg = args.adpkg[0]

    if args.debug:
        print(args)

    return args


def main(argv=None):
    """
    Print the requested descriptor values for each input files.
    One file per line.
    """
    if argv is None:
        argv = sys.argv[1:]

    if not sys.stdin.isatty():
        input_stream = [fname.rstrip() for fname in sys.stdin]
        argv[0:0] = input_stream

    args = parse_args(argv)

    if args.adpkg is not None:
        import_module(args.adpkg)

    pretty = False if args.long else True

    # Go through the files and store the descriptors in a list of list.
    hdr = ['filename']
    for descriptor in args.descriptors:
        hdr.append(descriptor)

    results = [hdr]
    for filename in args.inputs:
        ad = astrodata.open(filename)
        values = get_descriptor_value(ad, args.descriptors, pretty)
        new_entry = [filename]
        new_entry.extend(values)
        results.append(new_entry)

    # Print the results to screen either in a CSV format if requested,
    # or in a human readable table.

    if args.csv:
        for row in results:
            print(",".join([str(item) for item in row]))
    else:
        printtable(results)




if __name__ == '__main__':
    sys.exit(main())
